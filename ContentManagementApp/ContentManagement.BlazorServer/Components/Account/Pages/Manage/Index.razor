@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using ContentManagement.BlazorServer.Data.UserValidators
@using Microsoft.AspNetCore.Identity
@using ContentManagement.BlazorServer.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Profile</PageTitle>

<h3>Profile</h3>
<StatusMessage />

<div class="row">
    <div class="col-md-6">
        <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <input type="text" value="@username" class="form-control" placeholder="Please choose your username." disabled />
                <label for="username" class="form-label">Username</label>
            </div>

            <div class="form-floating mb-3">
                <InputText id="displayname" @bind-Value="Input.DisplayName" class="form-control" placeholder="Display name." disabled />
                <label for="displayname" class="form-label">Display Name</label>
                <ValidationMessage For="() => Input.DisplayName" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText id="firstname" @bind-Value="Input.FirstName" class="form-control" placeholder="Please enter your first name." />
                <label for="firstname" class="form-label">First Name</label>
                <ValidationMessage For="() => Input.FirstName" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText id="lastname" @bind-Value="Input.LastName" class="form-control" placeholder="Please enter your last name." />
                <label for="lastname" class="form-label">Last Name</label>
                <ValidationMessage For="() => Input.LastName" class="text-danger" />
            </div>
           
            <button type="submit" class="w-100 btn btn-lg btn-dark">Save</button>
        </EditForm>
    </div>
</div>

@code {
    private ApplicationUser user = default!;
    private string? username;
    private string? displayname;
    private string? firstname;
    private string? lastname;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Input ??= new();

        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        username = await UserManager.GetUserNameAsync(user);

        displayname ??= user.DisplayName;
        firstname ??= user.FirstName;
        lastname ??= user.LastName;

        Input.DisplayName ??= displayname;
        Input.FirstName ??= firstname;
        Input.LastName ??= lastname;

    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.FirstName != firstname || Input.LastName != lastname)
        {
            
            user.FirstName = Input.FirstName;
            user.LastName = Input.LastName;

            var updateResult = await UserManager.UpdateAsync(user);

            await SignInManager.RefreshSignInAsync(user);
            RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
        }        
    }

    private sealed class InputModel
    {
        [StringLength(50, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [Display(Name = "Display Name")]
        public string? DisplayName { get; set; }

        [StringLength(100)]
        [Display(Name = "First Name")]
        public string? FirstName { get; set; }

        [StringLength(100)]
        [Display(Name = "Last Name")]
        public string? LastName { get; set; }
    }
}
