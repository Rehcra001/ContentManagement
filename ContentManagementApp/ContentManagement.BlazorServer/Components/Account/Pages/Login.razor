@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using ContentManagement.BlazorServer.Services.Contracts
@using ContentManagement.Models
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using ContentManagement.BlazorServer.Data
@using Serilog
@using ILogger = Serilog.ILogger

@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IPersonService PersonService
@inject IdentityUserAccessor UserAccessor
@inject UserManager<ApplicationUser> UserManager
@inject ILogger Logger


<PageTitle>Log In</PageTitle>

<h1 class="text-center">Log In</h1>
<div class="row justify-content-center">
    <div class="col-lg-6 col-md-8 col-sm-10">
        <section>
            <StatusMessage Message="@errorMessage" />
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                @* <h2 class="text-center">Account Login.</h2> *@
                <hr />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <label for="email" class="form-label">Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                    <label for="password" class="form-label">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                @* <div class="checkbox mb-3">
                <label class="form-label">
                <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                Remember me
                </label>
                </div> *@
                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-dark">Log in</button>
                </div>
                <div>
                    <p>
                        <a href="Account/ForgotPassword" class="text-black">Forgot your password?</a>
                    </p>
                    @* <p>
                    <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
                    </p> *@
                    <p>
                        <a href="Account/ResendEmailConfirmation" class="text-black">Resend email confirmation</a>
                    </p>
                </div>
            </EditForm>
        </section>
    </div>@*
    <div class="col-md-6 col-md-offset-2">
    <section>
    <h3>Use another service to log in.</h3>
    <hr />
    <ExternalLoginPicker />
    </section>
    </div> *@
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }



    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            //Fetch the user details
            ApplicationUser user = await UserAccessor.GetRequiredUserAsync(HttpContext);
            string username = user.UserName!;

            //Check if user has been added to Content DB
            bool exists = await PersonService.PersonExists(username);
            //If not then add them
            if (exists == false)
            {
                await CreatePerson(user);
            }
            else
            {
                //Make sure display name is correct in case the user deleted his account
                //and added it again
                //No person is ever removed from ContentManagementDB
                //in order to preserve comments
                PersonModel person = new PersonModel
                    {
                        UserName = user.Email,
                        DisplayName = user.DisplayName
                    };

                await PersonService.UpdatePerson(person);
            }

            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            var user = await UserAccessor.GetRequiredUserAsync(HttpContext);
            Logger.Information("User: {user} was locked out", user.UserName);
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
        await Log.CloseAndFlushAsync();
    }

    private async Task CreatePerson(ApplicationUser user)
    {
        PersonModel person = new PersonModel
            {
                UserName = user.UserName!,
                DisplayName = user.DisplayName!
            };

        try
        {
            await PersonService.AddPerson(person);
        }
        catch (Exception ex)
        {
            //Log exception
            Logger.Error(ex.Message, ex);
            //sign the user out
            await SignInManager.SignOutAsync();
        }
    }

    private async Task<string> GetUserMainRole(ApplicationUser user)
    {
        IList<string> roles = await UserManager.GetRolesAsync(user);

        //Three levels of Roles
        //in order of precedence
        if (roles.Contains("Administrator"))
        {
            return "Administrator";
        }
        else if (roles.Contains("Author"))
        {
            return "Author";
        }
        else //(roles.Contains("User"))
        {
            return "User";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
